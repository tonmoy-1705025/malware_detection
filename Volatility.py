import os
import re
import subprocess

class Volatility:
    def __init__( self, CMD_PRE_FIX , PROFILE , DUMP_PATH , folder ):
        self.CPFX = CMD_PRE_FIX
        self.PROFILE = PROFILE
        self.DPATH = DUMP_PATH
        self.folder = folder

    def __write_log(self, data, plugin):
        file = open(f"local/{self.folder}/{plugin}.txt", 'w', encoding='utf-8')
        file.write(data)
        print(f"\t\t # {plugin} data saved in local")
        file.close()

    # Get data from local
    def __get_from_local(self, plugin):
        print(f"Getting {plugin} plugin data from local ...." ,)
        file = open(f"local/{self.folder}/{plugin}.txt", 'r', encoding='utf-8')
        print("\tSuccessfull")
        file_contents = file.read()
        file.close()
        return file_contents

    # count lines
    def __count(text , substract=2 ):
        return len(text.splitlines()) - substract
    
    # Get data from dump
    def general_plugin( self, plugin ):
        # first check in local
        output = ""
        try : 
            output = self.__get_from_local(plugin)
        except :
            cmd = f"{self.CPFX} {self.DPATH} {self.PROFILE} {plugin}"

            print("Working On Hanles plugin...." ,)
            print(cmd)
            output = subprocess.check_output(cmd, shell=True, text=True)
            print("\tCommand Run Successfull")
            self.__write_log(output , plugin)
        return output

    #general Count
    def general_count( self, plugin , test ):
        output = ""
        if test == 1 :
            # Search To local
            output = self.__get_from_local(plugin)
        else :
            output = self.general_plugin(plugin)
        raw_data = output.splitlines()
        return len(raw_data)-2
    
    # ldrmodules Count
    def ldrmodules( self, plugin , test ):
        output = ""
        if test == 1 :
            # Search To local
            output = self.__get_from_local(plugin)
        else :
            output = self.general_plugin(plugin)
        # set data to constructor
        self.ldrmodules_data = output
        raw_data = output.splitlines()
        return len(raw_data)-2
    
    
    # ldrmodules extra count
    def ldrmodules_extra( self, type , index ):
        raw_data = ""
        if self.ldrmodules_data!="":
            raw_data = self.ldrmodules_data
        else :
            raw_data = self.__get_from_local('ldrmodules')

        lines = raw_data.splitlines()
        lines = lines[1:]

        if type=="unique_path":
            # start counting unique path
            unique = []
            for line in lines :
                columns = line.split()
                if columns[-1] not in unique :
                    unique.append(columns[-1])
            return len(unique)
        
        if type=="false_count":
            # start counting false
            false = []
            for line in lines :
                columns = line.split()
                if columns[index] == "False" :
                    false.append(columns[3])
            return len(false)
        
        if type=="all_false_count":
            # start counting false
            false = []
            for line in lines :
                columns = line.split()
                if columns[3]=="False" and columns[4]=="False" and columns[5]=="False":
                    false.append(columns[3])
            return len(false)


    def privis_enabled_not_default( self, plugin, test ):
        output = ""
        if test == 1 :
            # Search To local
            output = self.__get_from_local(plugin)
        else :
            output = self.general_plugin(plugin)
        # set data to constructor
        self.ldrmodules_data = output
        raw_data = output.splitlines()
        raw_data = raw_data[1:]

        count = 0
        for line in raw_data:
            columns = line.split()
            if "Enabled" in columns[4] and "Default" not in columns[4] :
                count+=1

        return count

    
    ###################  psxview  ##############################
    def psxview_false_column(self, plugin ):
       
        output = self.__get_from_local(plugin)
        data = output.splitlines()
        data = data[2:]
        false = []
        for i in data :
            if "False" in i:
                false.append(i)

        process_count = len(false)
        return process_count

    def psxview_false_row(self, plugin):

        output = output = self.__get_from_local(plugin)
        data = output.splitlines()
        data = data[2:]
        false = []
        for i in data :
            if "False" in i:
                false.append(i)
        process_count = len(false)
        return process_count

    def psxview_all(self, plugin):
        output = self.__get_from_local(plugin)
        data = output.splitlines()
        data = data[2:]
        process_count = len(data)
        return process_count

    def psxview_process_true(self , plugin , index ):

        output = output = self.__get_from_local(plugin)
        data = output.splitlines()
        data = data[2:]
        
        count = 0
        for line in data :
            row = line.split()
            if "True" == row[index] :
                count+=1

        return count


    ####################### svcscan #####################
    def svcscan_all(self, plugin):
        output = output = output = self.__get_from_local(plugin)
        data = output.splitlines()
        n_of_service = 0
        n_of_running = 0
        n_of_stopped = 0
        for line in data :
            if "Service Name:" in line :
                n_of_service+=1
            elif "Service State: SERVICE_RUNNING" in line :
                n_of_running+=1
            elif "Service State: SERVICE_STOPPED" in line :
                n_of_stopped+=1
        return [n_of_service, n_of_running, n_of_stopped]


    ################## dlls_dlllist_unique_paths_num  #####
    def dlllist_unique_path(self, plugin):
        output = self.__get_from_local(plugin)
            
        extracted_data = []
        pattern = r"0x([0-9a-fA-F]+)\s+0x([0-9a-fA-F]+)\s+0x([0-9a-fA-F]+)\s+(.+)"
        matches = re.findall(pattern, output)

        # Iterate through matches and create dictionaries
        for match in matches:
            base, size, load_count, path = match
            extracted_data.append([ base, size, load_count, path.strip()] )
        
        unique_path = []
        for row in extracted_data :
            if row[3] not in unique_path:
                unique_path.append(row[3])

        count = len(unique_path)
        return len(unique_path)






    def __get_ldrmodules(self,PLUGIN) :
        try:
            output = self.general_plugin(PLUGIN)
            self.ldrmodules = output
        except subprocess.CalledProcessError:
            print(subprocess.CalledProcessError)

    def __get_psxview(self,PLUGIN) :
        try:
            output = self.general_plugin(PLUGIN)
            self.psxview = output
        except subprocess.CalledProcessError:
            print(subprocess.CalledProcessError)

    def __get_svcscan(self,PLUGIN) :
        try:
            output = self.general_plugin(PLUGIN)
            self.svcscan = output
        except subprocess.CalledProcessError:
            print(subprocess.CalledProcessError)

    ################### ldrmodules ############################
    def get_ldrmodules( self, plugin , condition ):
        
        PLUGIN = plugin
        if self.ldrmodules == "" :
            self.__get_ldrmodules(plugin)

        output_list = self.ldrmodules.splitlines()

        if condition == "all" :
            process_count = len(output_list) - 2
            print(f"Number of all ldrmodules : {process_count}")
            return process_count
        
        elif condition == "unique" :
            output_list = output_list[1:]

            unique_dlls = []

            for line in output_list :
                columns = line.split('\t')
                print(len(columns))
                if len(columns) > 1 :
                    c_dll = columns[-1]
                    print(c_dll)
                    if c_dll not in unique_dlls :
                        unique_dlls.append(c_dll)
        
            process_count = len(unique_dlls)
            print(f"Number of unique path ldrmodules : {process_count}")
            return process_count




    def mutantscan(self, plugin):
        PLUGIN = plugin
        output = self.general_plugin(plugin)
        data = output.splitlines()
        data = data[2:]
        process_count = len(data)
        print(f"Number of {plugin} : {process_count}")
        return process_count
    
    def thrdscan(self, plugin):
        PLUGIN = plugin
        output = self.general_plugin(plugin)
        data = output.splitlines()
        data = data[2:]
        process_count = len(data)
        print(f"Number of {plugin} : {process_count}")
        return process_count
    
    def pslist(self, plugin):
        PLUGIN = plugin
        output = self.general_plugin(plugin)
        data = output.splitlines()
        data = data[2:]
        process_count = len(data)
        print(f"Number of {plugin} : {process_count}")
        return process_count
    
    def netscan(self, plugin):
        PLUGIN = plugin
        output = self.general_plugin(plugin)
        data = output.splitlines()
        count = 0
        for line in data :
            if "UDP" in line or "TCP" in line :
                count+=1

        process_count = count
        print(f"Number of {plugin} : {process_count}")
        return process_count



































    
